h1 {
    text-align: center;
    
}

.container {
    background-color : rgb(255, 255, 255);
    padding: 10px 0px;
}

.marker {
    background-color: red;
    height: 25px;
    width: 200px;
    margin: 10px auto;
}
/* primary : white when combined */
/* secondary : combined maxed rgb val */
/* tertiary : primary + secondary  */
.red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);
}

.green {
    background: linear-gradient(#55680D, #71F53E, #116C31); 
    box-shadow: 0 0 20px 0 #3B7E20CC;
}
  

.blue {
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
    box-shadow: 0 0 20px 0 hsla(223, 59%, 31%, 0.8);
}


.cap {
    width: 60px;
    height: 25px;
}

.sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);
    border-left: 10px double rgba(0, 0, 0, 0.75);
}
/* The border-left shorthand property lets you to set the left border's width, style, and color at the same time.
Here is the syntax:  border-left: width style color; */

.cap, .sleeve {
    display: inline-block;
  }

/* Two colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. */
/* It's better practice to choose one color as the dominant color, and use its complementary color as an accent to bring attention to certain content on the page. */
/* With hex colors, 00 is 0% of that color, and FF is 100%.  */
/* The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
Hue - Color, Saturation : intensity , Lightness : brightness
The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness. */
/* If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.
Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values. */
/* Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral. */



/* use a color transition, or gradient, on an element. LINEAR GRADIENT*/

/* One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value. */
/* The linear-gradient function automatically calculates these values for you, and places colors evenly along the gradient line by default. */
/* If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default. */

/* OPACITY: 
Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through.
 value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, the element will be completely opaque like it is by default.
 Another way to set the opacity for an element is with the alpha channel.
 You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color, use the rgba function instead.
 The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:

rgba(redValue, greenValue, blueValue, alphaValue);
*/

/* This is because the default display property for div elements is block. So when two block elements are next to each other, they stack like actual blocks. For example, your marker elements are all stacked on top of each other. */
/* All HTML elements have borders, though they're usually set to none by default.  */
/* box-shadow: offsetX offsetY color; */

/* Remember that you don't need to add units to a zero value. */