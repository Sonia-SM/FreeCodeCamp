* {
    box-sizing: border-box;
    /* content-box- expands with padding and border | box-sizing: content-box;
       border-box - shrinks conent to make room for the padding and border
    */
}

.header {
    text-align : center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid  #fdb347;
}


/* Flexbox is a one-dimensional CSS layout that can control the way items
 are spaced out and aligned within a container. */
/* display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items. */
/* Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, 
   which has four possible values: row(default Left to right), row-reverse (R->L), column (top-> bottom), column-reverse (Bottom-> Top)
 FLEX WRAP : The flex-wrap property determines how your flex items behave when the flex container is too small. 
 flex-wrap: wrap or no wrap - default is no wrap

 JUSTIFY-CONTENT: The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.

 The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical.
 
 Notice how some of your images have become distorted. This is because the images have different aspect ratios. Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave.

*/
.gallery {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    gap: 16px;
}

.gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    object-fit:cover;
    border-radius: 8px;
}

/* The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set justify-content: center on the flex container. */
.gallery::after {
    content: "";
    width: 350px;
}

body{
    margin:0 ;
    font-family: sans-serif;
    background-color: #f5f6f7;
}

/* .gallery {
    width: 50%;
    border: 5px solid red;
}

img {
    width: 100%;
    padding: 5px;
    border: 5px solid blue;
   
}
  */